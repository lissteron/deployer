// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package github

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson619ac83dDecodeGithubComLissteronDeployerPkgGithub(in *jlexer.Lexer, out *Sender) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "id":
			out.ID = int64(in.Int64())
		case "node_id":
			out.NodeID = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson619ac83dEncodeGithubComLissteronDeployerPkgGithub(out *jwriter.Writer, in Sender) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Login != "" {
		const prefix string = ",\"login\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	if in.NodeID != "" {
		const prefix string = ",\"node_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NodeID))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Sender) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson619ac83dEncodeGithubComLissteronDeployerPkgGithub(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Sender) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson619ac83dEncodeGithubComLissteronDeployerPkgGithub(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Sender) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson619ac83dDecodeGithubComLissteronDeployerPkgGithub(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Sender) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson619ac83dDecodeGithubComLissteronDeployerPkgGithub(l, v)
}
func easyjson619ac83dDecodeGithubComLissteronDeployerPkgGithub1(in *jlexer.Lexer, out *Repository) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "node_id":
			out.NodeID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "full_name":
			out.FullName = string(in.String())
		case "private":
			out.Private = bool(in.Bool())
		case "owner":
			(out.Owner).UnmarshalEasyJSON(in)
		case "html_url":
			out.HTMLURL = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "fork":
			out.Fork = bool(in.Bool())
		case "url":
			out.URL = string(in.String())
		case "created_at":
			out.CreatedAt = int64(in.Int64())
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "pushed_at":
			out.PushedAt = int64(in.Int64())
		case "git_url":
			out.GitURL = string(in.String())
		case "sshurl":
			out.SSHURL = string(in.String())
		case "clone_url":
			out.CloneURL = string(in.String())
		case "size":
			out.Size = int(in.Int())
		case "default_branch":
			out.DefaultBranch = string(in.String())
		case "master_branch":
			out.MasterBranch = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson619ac83dEncodeGithubComLissteronDeployerPkgGithub1(out *jwriter.Writer, in Repository) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	if in.NodeID != "" {
		const prefix string = ",\"node_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NodeID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.FullName != "" {
		const prefix string = ",\"full_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FullName))
	}
	if in.Private {
		const prefix string = ",\"private\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Private))
	}
	if true {
		const prefix string = ",\"owner\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Owner).MarshalEasyJSON(out)
	}
	if in.HTMLURL != "" {
		const prefix string = ",\"html_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HTMLURL))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if in.Fork {
		const prefix string = ",\"fork\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Fork))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	if in.CreatedAt != 0 {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.CreatedAt))
	}
	if true {
		const prefix string = ",\"updated_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	if in.PushedAt != 0 {
		const prefix string = ",\"pushed_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PushedAt))
	}
	if in.GitURL != "" {
		const prefix string = ",\"git_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GitURL))
	}
	if in.SSHURL != "" {
		const prefix string = ",\"sshurl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SSHURL))
	}
	if in.CloneURL != "" {
		const prefix string = ",\"clone_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CloneURL))
	}
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Size))
	}
	if in.DefaultBranch != "" {
		const prefix string = ",\"default_branch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DefaultBranch))
	}
	if in.MasterBranch != "" {
		const prefix string = ",\"master_branch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MasterBranch))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Repository) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson619ac83dEncodeGithubComLissteronDeployerPkgGithub1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Repository) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson619ac83dEncodeGithubComLissteronDeployerPkgGithub1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Repository) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson619ac83dDecodeGithubComLissteronDeployerPkgGithub1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Repository) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson619ac83dDecodeGithubComLissteronDeployerPkgGithub1(l, v)
}
func easyjson619ac83dDecodeGithubComLissteronDeployerPkgGithub2(in *jlexer.Lexer, out *Pusher) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson619ac83dEncodeGithubComLissteronDeployerPkgGithub2(out *jwriter.Writer, in Pusher) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pusher) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson619ac83dEncodeGithubComLissteronDeployerPkgGithub2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pusher) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson619ac83dEncodeGithubComLissteronDeployerPkgGithub2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pusher) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson619ac83dDecodeGithubComLissteronDeployerPkgGithub2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pusher) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson619ac83dDecodeGithubComLissteronDeployerPkgGithub2(l, v)
}
func easyjson619ac83dDecodeGithubComLissteronDeployerPkgGithub3(in *jlexer.Lexer, out *PushEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ref":
			out.Ref = string(in.String())
		case "before":
			out.Before = string(in.String())
		case "after":
			out.After = string(in.String())
		case "created":
			out.Created = bool(in.Bool())
		case "deleted":
			out.Deleted = bool(in.Bool())
		case "forced":
			out.Forced = bool(in.Bool())
		case "base_ref":
			if in.IsNull() {
				in.Skip()
				out.BaseRef = nil
			} else {
				if out.BaseRef == nil {
					out.BaseRef = new(string)
				}
				*out.BaseRef = string(in.String())
			}
		case "compare":
			out.Compare = string(in.String())
		case "repository":
			(out.Repository).UnmarshalEasyJSON(in)
		case "pusher":
			(out.Pusher).UnmarshalEasyJSON(in)
		case "sender":
			(out.Sender).UnmarshalEasyJSON(in)
		case "commits":
			if in.IsNull() {
				in.Skip()
				out.Commits = nil
			} else {
				in.Delim('[')
				if out.Commits == nil {
					if !in.IsDelim(']') {
						out.Commits = make([]Commit, 0, 1)
					} else {
						out.Commits = []Commit{}
					}
				} else {
					out.Commits = (out.Commits)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Commit
					(v1).UnmarshalEasyJSON(in)
					out.Commits = append(out.Commits, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "head_commit":
			(out.HeadCommit).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson619ac83dEncodeGithubComLissteronDeployerPkgGithub3(out *jwriter.Writer, in PushEvent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ref != "" {
		const prefix string = ",\"ref\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Ref))
	}
	if in.Before != "" {
		const prefix string = ",\"before\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Before))
	}
	if in.After != "" {
		const prefix string = ",\"after\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.After))
	}
	if in.Created {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Created))
	}
	if in.Deleted {
		const prefix string = ",\"deleted\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Deleted))
	}
	if in.Forced {
		const prefix string = ",\"forced\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Forced))
	}
	if in.BaseRef != nil {
		const prefix string = ",\"base_ref\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.BaseRef))
	}
	if in.Compare != "" {
		const prefix string = ",\"compare\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Compare))
	}
	if true {
		const prefix string = ",\"repository\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Repository).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"pusher\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Pusher).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"sender\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Sender).MarshalEasyJSON(out)
	}
	if len(in.Commits) != 0 {
		const prefix string = ",\"commits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Commits {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"head_commit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.HeadCommit).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PushEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson619ac83dEncodeGithubComLissteronDeployerPkgGithub3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PushEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson619ac83dEncodeGithubComLissteronDeployerPkgGithub3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PushEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson619ac83dDecodeGithubComLissteronDeployerPkgGithub3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PushEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson619ac83dDecodeGithubComLissteronDeployerPkgGithub3(l, v)
}
func easyjson619ac83dDecodeGithubComLissteronDeployerPkgGithub4(in *jlexer.Lexer, out *Owner) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "login":
			out.Login = string(in.String())
		case "id":
			out.ID = int64(in.Int64())
		case "node_id":
			out.NodeID = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson619ac83dEncodeGithubComLissteronDeployerPkgGithub4(out *jwriter.Writer, in Owner) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Login != "" {
		const prefix string = ",\"login\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Login))
	}
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	if in.NodeID != "" {
		const prefix string = ",\"node_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NodeID))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Owner) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson619ac83dEncodeGithubComLissteronDeployerPkgGithub4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Owner) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson619ac83dEncodeGithubComLissteronDeployerPkgGithub4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Owner) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson619ac83dDecodeGithubComLissteronDeployerPkgGithub4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Owner) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson619ac83dDecodeGithubComLissteronDeployerPkgGithub4(l, v)
}
func easyjson619ac83dDecodeGithubComLissteronDeployerPkgGithub5(in *jlexer.Lexer, out *Commit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "tree_id":
			out.TreeID = string(in.String())
		case "distinct":
			out.Distinct = bool(in.Bool())
		case "message":
			out.Message = string(in.String())
		case "timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "url":
			out.URL = string(in.String())
		case "author":
			(out.Author).UnmarshalEasyJSON(in)
		case "committer":
			(out.Committer).UnmarshalEasyJSON(in)
		case "added":
			if in.IsNull() {
				in.Skip()
				out.Added = nil
			} else {
				in.Delim('[')
				if out.Added == nil {
					if !in.IsDelim(']') {
						out.Added = make([]string, 0, 4)
					} else {
						out.Added = []string{}
					}
				} else {
					out.Added = (out.Added)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Added = append(out.Added, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "removed":
			if in.IsNull() {
				in.Skip()
				out.Removed = nil
			} else {
				in.Delim('[')
				if out.Removed == nil {
					if !in.IsDelim(']') {
						out.Removed = make([]string, 0, 4)
					} else {
						out.Removed = []string{}
					}
				} else {
					out.Removed = (out.Removed)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.Removed = append(out.Removed, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "modified":
			if in.IsNull() {
				in.Skip()
				out.Modified = nil
			} else {
				in.Delim('[')
				if out.Modified == nil {
					if !in.IsDelim(']') {
						out.Modified = make([]string, 0, 4)
					} else {
						out.Modified = []string{}
					}
				} else {
					out.Modified = (out.Modified)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.Modified = append(out.Modified, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson619ac83dEncodeGithubComLissteronDeployerPkgGithub5(out *jwriter.Writer, in Commit) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.TreeID != "" {
		const prefix string = ",\"tree_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TreeID))
	}
	if in.Distinct {
		const prefix string = ",\"distinct\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Distinct))
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	if true {
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Timestamp).MarshalJSON())
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	if true {
		const prefix string = ",\"author\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Author).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"committer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Committer).MarshalEasyJSON(out)
	}
	if len(in.Added) != 0 {
		const prefix string = ",\"added\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v7, v8 := range in.Added {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.String(string(v8))
			}
			out.RawByte(']')
		}
	}
	if len(in.Removed) != 0 {
		const prefix string = ",\"removed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v9, v10 := range in.Removed {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	if len(in.Modified) != 0 {
		const prefix string = ",\"modified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.Modified {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Commit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson619ac83dEncodeGithubComLissteronDeployerPkgGithub5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Commit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson619ac83dEncodeGithubComLissteronDeployerPkgGithub5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Commit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson619ac83dDecodeGithubComLissteronDeployerPkgGithub5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Commit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson619ac83dDecodeGithubComLissteronDeployerPkgGithub5(l, v)
}
func easyjson619ac83dDecodeGithubComLissteronDeployerPkgGithub6(in *jlexer.Lexer, out *Author) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "username":
			out.Username = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson619ac83dEncodeGithubComLissteronDeployerPkgGithub6(out *jwriter.Writer, in Author) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Username != "" {
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Author) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson619ac83dEncodeGithubComLissteronDeployerPkgGithub6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Author) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson619ac83dEncodeGithubComLissteronDeployerPkgGithub6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Author) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson619ac83dDecodeGithubComLissteronDeployerPkgGithub6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Author) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson619ac83dDecodeGithubComLissteronDeployerPkgGithub6(l, v)
}
